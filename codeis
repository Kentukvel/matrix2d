import Foundation

class Matrix2D {
    
    private var rows: Int
    private var columns: Int
    var matr: [[Double]]
   
    func setMatrix(_ matrix: [[Double]]) {
        matr = matrix
    }
    
    subscript(i: Int, j: Int) -> Double {
        get {
            return matr[i][j]
        }
        set {
            matr[i][j] = newValue
        }
    }
    
    private var isSquare: Bool {
        return rows == columns
    }
    
    init(matrix: [[Double]]) {
        matr = matrix
        rows = matrix.count
        columns = matrix[0].count
    }
    
    init(rows: Int, columns: Int) {
        self.columns = columns
        self.rows = rows
        matr = Array(repeating: Array(repeating: 0.0, count: columns), count: rows)
    }
    
    //мінор за даним елементом
    public func minor(of matrix: [[Double]], row: Int, col: Int) -> [[Double]] {
       // print(matrix)
        var newMatr = Array(repeating: [Double](), count: matrix.count - 1)
        
        var currentRow = 0
        for i in 0..<matrix.count {
            if row == i {
                continue
            }
            for j in 0..<matrix.count {
                
                if j != col {
                    newMatr[currentRow].append(matrix[i][j])
                }
            }
            currentRow += 1
        }
        
        return newMatr
    }
    
    //визначник
    func determinant() -> Double {
        assert(isSquare)
        return determinant(of: matr)
    }
    
    private func determ2x2(of matrix: [[Double]]) -> Double {
        return (matrix[0][0] * matrix[1][1] - matrix[1][0] * matrix[0][1])
    }
    
    func determinant(of matrix: [[Double]]) -> Double {
        if matrix.count == 2 {
            return determ2x2(of: matrix)
        }
        var determ = 0.0
        var plusOrMin = 1.0
        
        for j in 0..<matrix.count {
            let minor = self.minor(of: matrix, row: 0, col: j)
            determ += plusOrMin * matrix[0][j] * determinant(of: minor)
            plusOrMin = -plusOrMin
        }
        
        return determ
    }
    
    //Ранг даної матриці
    func rank() -> Int {
        var matrix = matr
        let eps = 1e-9
        let n = rows
        let m = columns
        
        var rank = min(n, m)
        var lineIsUsed = Array(repeating: false, count: n)
        for i in 0..<m {
            var j = 0
            
            while j < n {
                if !lineIsUsed[j] && abs(matrix[j][i]) > eps {
                    break
                }
                j += 1
            }
            
            if j == n {
                rank -= 1
            } else {
                lineIsUsed[j] = true
                
                for p in (i + 1)..<m {
                    matrix[j][p] /= matrix[j][i]
                }
                for k in (i + 1)..<m {
                    if k != j && abs(matrix[k][i]) > eps {
                        for p in (i + 1)..<m {
                            matrix[k][p] -= matrix[j][p] * matrix[k][i]
                        }
                    }
                }
                
            }
        }
        
        return rank
    }
    
    //транспонована матриця
    func getTransponMatr() -> [[Double]] {
        var newMatr = Array(repeating: Array(repeating: 0.0, count: rows), count: rows)
        for i in 0..<rows {
            for j in 0..<rows {
                //print(newMatr)
                newMatr[i][j] = determinant(of: minor(of: matr, row: j, col: i))
            }
        }
        return newMatr
    }
    
    func transpon() -> Matrix2D {
        let newMatr = Matrix2D(rows: self.columns, columns: self.rows)
        for i in 0..<self.rows {
            for j in 0..<self.columns {
                newMatr[j, i] = matr[i][j]
            }
        }
        return newMatr
    }
    
    //обернена матриця
    func getInvertableMatrix() -> [[Double]] {
        let det = determinant()
        var invMatr = getTransponMatr()
        for i in 0..<rows {
            for j in 0..<rows {
                invMatr[i][j] /= det
            }
        }
        return invMatr
    }
    
    func norma() -> Double {
        var norma = 0.0
        for i in 0..<rows {
            for j in 0..<columns {
                norma += matr[i][j] * matr[i][j]
                
            }
        }
        return sqrt(norma)//корінь із суми квадратів елементів матриці
    }
    
    //міра обумовленості
//    var conditionNumber: Double {
//        get {
//            return norma(of: matr) * norma(of: getInvertableMatrix())
//        }
//    }
    
    //метод Зейделя(клас Matrix)
    func seidel(rightParts: [Double]) -> [Double] {
        
        var x = rightParts
        var prevX = Array(repeating: 0.0, count: rows)
        repeat {
            prevX = x //присвоюємо значення вектору попередніх розв'язків
            for i in 0..<rows {
                var variable = 0.0
                for j in 0..<i {
                    variable += (matr[i][j] * x[j])
                }
                //не допускаємо випадку i == j
                for j in (i + 1)..<rows {
                    variable += matr[i][j] * prevX[j]
                }
                x[i] = (rightParts[i] - variable) / matr[i][i] //i-та компонента k+1 наближення
            }

        } while finalCondition(xk: x, xkPrev: prevX)//перевіряємо умову закінчення
        return x
        
    }
    
    //Умова закінчення ітераційної послідовності при точності epsilon
    private func finalCondition(xk: [Double], xkPrev: [Double]) -> Bool {
        let epsilon = 0.0001//точність
        
        var norma = 0.0//Евклідова норма
        for i in 0..<rows {
            norma += (xk[i] - xkPrev[i])*(xk[i] - xkPrev[i])
        }
        if sqrt(norma) >= epsilon {
            return true
        }
        return false
    }
    
    //Operations
//    static func *(a: Matrix2D, b: Matrix2D) -> Matrix2D {
//        //guard a.columns == b.rows else { return nil }
//        let col = b.columns
//        var b = b
//        print(b.matr)
////        if b.rows == 1 {
////            print(b.matr)
////            var newMatr = Array(repeating: Array(repeating: 0.0, count: 1), count: b.columns)
////            print(newMatr)
////            for j in 0..<b.columns {
////                print("j = \(j)")
////                newMatr[j][0] = b[0, j]
////            }
////            b = Matrix2D(matrix: newMatr)
////        }
//        print("rows: \(a.rows), cols: \(col)")
//        var matrix = Array(repeating: Array(repeating: 0.0, count: col), count: a.rows)
//        for i in 0..<a.rows {
//            for j in 0..<col {
//                var elem = 0.0
//                for r in 0..<a.columns {
//                    elem += a[i, r] * b[r, j]
//                }
//                matrix[i][j] = elem
//            }
//        }
//        return Matrix2D(matrix: matrix)
//    }

    static func %(a: Matrix2D, b: Matrix2D) -> Matrix2D {
        let x = a * b
        
        if x.isSquare {
            var newX = Array(repeating: 0.0, count: x.rows)
            for i in 0..<x.rows {
                newX[i] = x[i, i]
            }
            return Matrix2D(matrix: [newX])
        }
        return x

    }
    
    static func *(a: Matrix2D, b: Matrix2D) -> Matrix2D {
        guard a.columns == b.rows else {
            return Matrix2D(rows: 0, columns: 0)
        }
        
//        if a.columns == b.columns && a.rows == b.rows && a.columns == 1 {
//            return a.transpon() * b
//        }
//
        let c = Matrix2D(matrix: Array(repeating: Array(repeating: 0.0, count: b.columns), count: a.rows))
        for i in 0..<c.rows {
            for j in 0..<c.columns {
                var el = 0.0
                for r in 0..<b.rows {
                    el += a[i, r] * b[r, j]
                }
                c.matr[i][j] = el
            }
        }
        return c
    }
    
    static func *(a: Double, b: Matrix2D) -> Matrix2D {
        var matrix = Array(repeating: Array(repeating: 0.0, count: b.columns), count: b.rows)
        for i in 0..<b.rows {
            for j in 0..<b.columns {
                matrix[i][j] = b[i, j] * a
            }
        }
       // print("matrix: \(matrix)")
        return Matrix2D(matrix: matrix)
    }
    
    static func +(a: Matrix2D, b: Matrix2D) -> Matrix2D {
        guard a.rows == b.rows && a.columns == b.columns else {
            return Matrix2D(rows: 0, columns: 0)
        }
        var matrix = Array(repeating: Array(repeating: 0.0, count: a.columns), count: a.rows)
        for i in 0..<a.rows {
            for j in 0..<a.columns {
                matrix[i][j] = a[i, j] + b[i, j]
            }
        }
        return Matrix2D(matrix: matrix)
    }
    
    static func -(a: Matrix2D, b: Matrix2D) -> Matrix2D {
        return a + (-1.0 * b)
    }
    
    class func sum(_ x: Matrix2D) -> Double {
        var sum = 0.0
        for i in 0..<x.rows {
            for j in 0..<x.columns {
                sum += x[i, j]
            }
        }
        return sum
    }
}
